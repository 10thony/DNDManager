🧠 System Prompt: User Roles and Campaign Access in D&D 5e Campaign Manager
Overview:
This app supports a two-tier user role system and campaign-specific roles for fine-grained access control. Both client-side and server-side enforcement are required. The system is built on Vite + React + TypeScript, using Convex for backend and Clerk for auth.

👤 Global User Roles
Roles:

admin: Has full access to all campaigns and resources. Can perform all CRUD operations.

user: Can view public campaigns and campaigns they’ve created. Can create, update their own content. Cannot delete anything. Cannot access hidden or admin-only UI views.

Schema Update:

ts
Copy
Edit
users: defineTable({
  clerkId: v.string(),
  email: v.string(),
  firstName: v.optional(v.string()),
  lastName: v.optional(v.string()),
  imageUrl: v.optional(v.string()),
  createdAt: v.number(),
  role: v.union(v.literal("admin"), v.literal("user")), // ← new
});
🧭 Navigation Behavior
Admins can see all routes and components (e.g., full campaign list, GM tools, etc.)

Users only see:

Public campaigns

Campaigns where they are creatorId or listed in the new players field

Their player characters, quests, and journals

All Delete buttons are hidden/disabled for users.

🔐 UI-Level Authorization (React + Clerk)
Load user role and ID via Clerk session

Filter and restrict content like this:

tsx
Copy
Edit
const { user } = useUser(); // from Clerk
const isAdmin = user?.publicMetadata.role === "admin";

const campaignsToShow = campaigns.filter(
  (c) =>
    c.isPublic ||
    c.creatorId === user?.id ||
    c.players.includes(user?.id)
);
Disable delete buttons if not admin:

tsx
Copy
Edit
{isAdmin && (
  <DeleteButton onClick={() => handleDelete()} />
)}
Optional reusable component:

tsx
Copy
Edit
export const AdminOnly: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const { user } = useUser();
  return user?.publicMetadata.role === "admin" ? <>{children}</> : null;
};
🔐 Server-Level Authorization (Convex)
Perform all critical access control checks inside Convex functions:

ts
Copy
Edit
export const deleteCampaign = mutation({
  args: { campaignId: v.id("campaigns") },
  handler: async (ctx, args) => {
    const user = ctx.user;
    if (!user || user.role !== "admin") {
      throw new Error("Unauthorized: Only admins can delete campaigns.");
    }
    await ctx.db.delete(args.campaignId);
  },
});
Limit reads:

ts
Copy
Edit
export const listCampaigns = query({
  handler: async (ctx) => {
    const user = ctx.user;
    if (!user) throw new Error("Not authenticated");

    return await ctx.db
      .query("campaigns")
      .filter((q) =>
        q.or(
          q.eq(q.field("isPublic"), true),
          q.eq(q.field("creatorId"), user._id),
          q.contains(q.field("players"), user._id)
        )
      )
      .collect();
  },
});
🧩 Campaign Roles (DM and Players)
To support per-campaign roles, add two new fields to the campaigns table:

ts
Copy
Edit
campaigns: defineTable({
  ...
  dmId: v.string(), // ← Clerk user ID of DM
  players: v.optional(v.array(v.string())), // ← List of Clerk user IDs
});
Rules:

The DM is the primary owner of the campaign.

Players listed in players[] can view the campaign if it’s private.

Only the DM and admins can modify a campaign’s structure.

Players can access player-related components (e.g., character sheets, quests).

UI elements should reflect whether the current user is:

the DM

a player

an admin

✅ Summary of Access Control Logic
Role/Condition	Can View	Can Edit	Can Delete
admin	✅ all	✅ all	✅ all
user (public)	✅ public campaigns	❌	❌
user (creator)	✅ own campaigns	✅ own	❌
user (as player)	✅ invited campaigns	✅ character/quests	❌
Not signed in	✅ public campaigns	❌	❌

